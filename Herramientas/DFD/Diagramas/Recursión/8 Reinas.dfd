 Dfd (c)
1
1
3
0
1
447
El siguiente algoritmo fue diseñado para dar solución al clásico problema de ' las ocho reinas '. Se trata de simular  el acomodo de ocho reinas en un tablero de ajedrez de tal forma que ninguna de ellas se vea amenazada por otra.                     Para representar el tablero se utilizan las ocho primeras posiciones de un vector. Cada una de estas representará una fila y contendrá la columna de dicha fila en la cual se ha colocado una reina.
12
1
5
Ubica
1
19
 vector , 1 , 5, r 
7
1
1
1
r
8
1
1
i
1
1
1
1
1
8
1
1
1
4
1
56
'Reina ', i, '     Fila: ', i, '   Columna: ', Vector(i)
10
13
4
1
13
'No se halló'
13
1
2
1
5
Ubica
1
23
 Vector, Fila, Col, res
1
277
La rutina recursiva 'Ubica', coloca una reina en la fila indicada por 'Fila' y la columna indicada por 'Col'.   Intentará colocar las reinas que falten en el tablero representado por el vector 'Vector' e indicará ( por medio de 'res' ) a la rutina llamadora si hubo éxito o no.
6
1
12
vector(Fila)
3
Col
7
0
1
6
Fila=8
6
1
3
Res
3
.f.
8
1
1
i
1
1
1
1
1
8
1
1
1
12
1
7
SePuede
1
18
Vector, Fila+1,i,r
7
0
1
1
r
13
12
1
5
Ubica
1
19
Vector,Fila+1,i,Res
7
0
1
3
Res
13
6
1
1
i
1
9
13
13
10
13
6
1
3
Res
3
.v.
13
3
2
1
7
SePuede
1
16
v, fila,  col, r
1
210
'Se Puede' verifica que al colocar una reina en la fila 'fila' con columna 'col' ésta no amenaze  a alguna de las que ya se han colocado en las filas anteriores. La respuesta es retornada en el parametro  'r' .
6
1
1
r
3
.V.
8
1
1
i
1
1
1
1
6
fila-1
1
1
1
7
0
1
87
(v(i) = col)    or  ( i-v(i) = fila-col )                      or ( fila-v(i) = i-col )
13
6
2
1
r
3
.F.
1
i
4
fila
13
10
3
